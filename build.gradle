/*
 *     Copyright 2021-present the original author or authors.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 */
import java.time.LocalDateTime

apply from: "springboot2-dependencies.gradle"

buildscript {

    ext {
        javaVersion = JavaVersion.VERSION_17
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
            mavenLocal()
            maven { url "https://maven.aliyun.com/repository/public" }
            maven { url "https://maven.aliyun.com/repository/spring" }
            maven { url "https://maven.aliyun.com/repository/spring-plugin" }
            maven { url "https://repo.spring.io/release" }
            maven { url "https://repo.spring.io/milestone" }
            mavenCentral()
        }
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.15.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.7.5"
    }
}

allprojects {
    group = GROUPID
    version = VERSION
}

subprojects {

    apply plugin: "java-library"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "idea"
    apply plugin: "maven-publish"
    apply plugin: 'org.springframework.boot'

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs << "-parameters" << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.forkOptions.jvmArgs << "-J--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED"
        options.forkOptions.jvmArgs << "--add-opens=java.base/java.lang=ALL-UNNAMED"
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = true
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                encoding "UTF-8"
                charSet 'UTF-8'
                author true
                version true
                failOnError false
                links "https://docs.oracle.com/en/java/javase/17/"
            }
        }
    }

    jar {
        into("META-INF/") {
            from rootProject.file("LICENSE")
        }
        into("META-INF/maven/$project.group/$project.name") {
            from { generatePomFileForMavenJavaPublication }
            rename ".*", "pom.xml"
        }
        afterEvaluate {
            manifest {
                attributes 'Implementation-Title': archiveBaseName
                attributes 'Implementation-Version': archiveVersion
                attributes 'Built-Gradle': gradle.gradleVersion
                attributes 'Bundle-DocURL': 'https://github.com/Code-13/java-stack-labs'
                attributes 'Build-OS': System.getProperty("os.name")
                attributes 'Built-By': System.getProperty("user.name")
                attributes 'Build-Jdk': System.getProperty("java.version")
                attributes 'Build-Timestamp': LocalDateTime.now().format("yyyy-MM-dd HH:mm:ss")
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = project.name
                    description = project.name
                    url = 'https://github.com/Code-13/java-stack-labs'
                    properties = [
                            myProp          : "value",
                            "prop.with.dots": "anotherValue"
                    ]
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'Code13'
                            name = 'Code13'
                            email = 'code__13@outlook.com'
                        }
                    }
                    scm {
                        connection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
                        developerConnection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
                        url = 'https://github.com/Code-13/java-stack-labs'
                    }
                    withXml {
                        def root = asNode()
                        root.dependencies.'*'.findAll {
                            def d = it
                            d.scope.text() == 'runtime' && project.configurations.findByName("implementation").allDependencies.find { dep ->
                                dep.name == it.artifactId.text()
                            }.each() {
                                d.scope*.value = 'compile'
                                d.appendNode('optional', true)
                            }
                        }
                    }
                }
            }
        }
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }

    dependencyManagement {
        imports {
            for (dep in rootProject.ext.bom) {
                mavenBom dep.value
            }
        }
        dependencies {
            for (dep in rootProject.ext.dependencies) {
                dependency dep.value
            }
        }
    }

    dependencies {
        implementation "org.checkerframework:checker-qual"

        compileOnly "org.slf4j:slf4j-api"
        testImplementation "org.slf4j:slf4j-api"

        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"
        testCompileOnly "org.projectlombok:lombok"

        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    }

    test {
        useJUnitPlatform()
    }

    compileJava.dependsOn(processResources)

    processResources {
        from('src/main/java') {
            include '**/*.xml'
        }
    }
}
