/*
 *     Copyright 2021-present the original author or authors.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 */

buildscript {

    ext {
        javaVersion = JavaVersion.VERSION_17
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
            mavenLocal()
            maven { url "https://maven.aliyun.com/repository/public" }
            maven { url "https://maven.aliyun.com/repository/spring" }
            maven { url "https://maven.aliyun.com/repository/spring-plugin" }
            maven { url "https://repo.spring.io/release" }
            maven { url "https://repo.spring.io/milestone" }
            mavenCentral()
        }
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

allprojects {
    group = GROUPID
    version = VERSION
}

subprojects {

    apply plugin: "java-library"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "idea"
    apply plugin: "maven-publish"
    apply plugin: 'org.springframework.boot'

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs << "-parameters" << "-Xlint:unchecked" << "-Xlint:deprecation" << "-J--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.boot:spring-boot-dependencies:${springBootVersion}'
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}'
        }
        dependencies {
            dependency 'org.checkerframework:checker-qual:${checkerframeworkVersion}'

            dependency 'com.baomidou:mybatis-plus-generator:${mybatisPlusGeneratorVersion}'
            dependencySet(group: "com.baomidou", version: '${mybatisPlusVersion}') {
                entry "mybatis-plus-boot-starter"
                entry "mybatis-plus-core"
                entry "mybatis-plus-extension"
                entry "mybatis-plus-annotation"
            }

            dependencySet(group: "org.mapstruct", version: '${mapstructVersion}') {
                entry "mapstruct"
                entry "mapstruct-processor"
            }

            dependency 'com.alibaba:druid-spring-boot-starter:${alibabaDruidVersion}'

            dependency 'io.vavr:vavr:${vavrVersion}'
            dependency 'io.vavr:vavr-jackson:${vavrJacksonVersion}'
            dependency 'io.vavr:vavr-test:${vavrTestVersion}'
            dependency 'io.vavr:vavr-gson:${vavrGsonVersion}'
            dependency 'io.vavr:vavr-beanvalidation2:${vavrBeanvalidation2Version}'

            dependency 'commons-io:commons-io:${commonsIoVersion}'
            dependency 'org.apache.commons:commons-collections4:${commonsCollections4Version}'
            dependency 'commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}'
            dependency 'commons-fileupload:commons-fileupload:${commonsFileuploadVersion}'
            dependency 'commons-net:commons-net:${commonsNetVersion}'

            dependency 'org.jsoup:jsoup:${jsoupVersio}'
            dependency 'org.reflections:reflections:${reflectionsVersion}'
            dependency 'com.googlecode.libphonenumber:libphonenumber:${libphonenumberVersion}'
            dependency 'org.locationtech.spatial4j:spatial4j:${spatial4jVersion}'
            dependency 'com.google.zxing:core:${zxingVersion}'

            dependencySet(group: "org.redisson", version: "${redissonVersion}") {
                entry "redisson"
                entry "redisson-spring-boot-starter"
                entry "redisson-mybatis"
                entry "redisson-spring-data-26"
            }

            dependencySet(group: "cn.hutool", version: "${hutoolVersion}") {
                entry "hutool-all"
                entry "hutool-aop"
                entry "hutool-bloomFilter"
                entry "hutool-cache"
                entry "hutool-core"
                entry "hutool-cron"
                entry "hutool-crypto"
                entry "hutool-db"
                entry "hutool-dfa"
                entry "hutool-extra"
                entry "hutool-http"
                entry "hutool-log"
                entry "hutool-script"
                entry "hutool-setting"
                entry "hutool-system"
                entry "hutool-json"
                entry "hutool-captcha"
                entry "hutool-poi"
                entry "hutool-socket"
                entry "hutool-jwt"
            }

        }
    }

    dependencies {
        implementation "org.checkerframework:checker-qual"

        compileOnly "org.slf4j:slf4j-api"

        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"
        testCompileOnly "org.projectlombok:lombok"
        testCompileOnly "org.springframework:spring-test"
        testImplementation "org.slf4j:slf4j-api"
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    }

    test {
        useJUnitPlatform()
    }

    compileJava.dependsOn(processResources)

    processResources {
        from('src/main/java') {
            include '**/*.xml'
        }
    }
}
