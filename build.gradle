/*
 *     Copyright 2021-present the original author or authors.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 */

apply from: "springboot2-dependencies.gradle"

buildscript {

    ext {
        javaVersion = JavaVersion.VERSION_17
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
            mavenLocal()
            maven { url "https://maven.aliyun.com/repository/public" }
            maven { url "https://maven.aliyun.com/repository/spring" }
            maven { url "https://maven.aliyun.com/repository/spring-plugin" }
            maven { url "https://repo.spring.io/release" }
            maven { url "https://repo.spring.io/milestone" }
            mavenCentral()
        }
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.6.7"
    }
}

allprojects {
    group = GROUPID
    version = VERSION
}

subprojects {

    apply plugin: "java-library"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "idea"
    apply plugin: "maven-publish"
    apply plugin: 'org.springframework.boot'

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs << "-parameters" << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.forkOptions.jvmArgs << "-J--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED"
        options.forkOptions.jvmArgs << "--add-opens=java.base/java.lang=ALL-UNNAMED"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }

    dependencyManagement {
        imports {
            for (dep in rootProject.ext.bom) {
                mavenBom dep.value
            }
        }
        dependencies {
            for (dep in rootProject.ext.dependencies) {
                dependency dep.value
            }
        }
    }

    dependencies {
        implementation "org.checkerframework:checker-qual"

        compileOnly "org.slf4j:slf4j-api"
        testImplementation "org.slf4j:slf4j-api"

        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"
        testCompileOnly "org.projectlombok:lombok"

        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    }

    test {
        useJUnitPlatform()
    }

    compileJava.dependsOn(processResources)

    processResources {
        from('src/main/java') {
            include '**/*.xml'
        }
    }
}
